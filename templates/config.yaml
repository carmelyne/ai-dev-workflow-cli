# Default AI Workflow Configuration
version: "1.0.0"

project:
  name: "${project_name}"
  type: "${project_type}"
  description: "${project_description}"
  repository: "${repository_url}"
  language: "${project_language}"
  framework: "${project_framework}"

workflows:
  0_context_persistence:
    description: "Maintain development context across sessions (foundational workflow)"

    context_management:
      user_controls:
        preserve_mechanisms:
          commands:
            - "ai context pin --item 'item_id'"
            - "ai context protect --pattern 'pattern'"
            - "ai context mark --as permanent 'item_id'"
          
          annotations:
            inline:
              - "#!keep-forever"
              - "#!important"
              - "#!reference"
            metadata:
              - "preserve_until: YYYY-MM-DD"
              - "preserve_reason: 'reason'"
          
          tags:
            - "@critical"
            - "@documentation"
            - "@decision"
            - "@learning"

        search_and_preserve:
          commands:
            - "ai context search 'query'"
            - "ai context preserve --from-search 'query'"
          options:
            - "--before-date"
            - "--after-date"
            - "--context-type"
            - "--preserve-matches"

        export_options:
          formats:
            - "markdown"
            - "yaml"
            - "json"
            - "html"
          commands:
            - "ai context export --tagged '@critical'"
            - "ai context export --preserved-only"
            - "ai context export --with-history"

      capacity:
        session_yaml:
          max_size: "1MB"
          rotation:
            trigger: "size_exceeded"
            action: "archive_and_rotate"
            archive_location: ".ai/context/archives/session/"
            retain_recent: 5
          cleanup:
            policy: "user_controlled"
            default_rules:
              - "Compress files older than 7 days"
              - "Delete archives older than 30 days"
            exceptions:
              - condition: "has_preservation_tag"
                action: "retain"
              - condition: "marked_as_permanent"
                action: "retain_and_index"
              - condition: "has_future_preserve_until_date"
                action: "check_date_and_retain"

        development_yaml:
          max_size: "5MB"
          rotation:
            trigger: "size_exceeded"
            action: "smart_archive"
            archive_location: ".ai/context/archives/development/"
            retain_recent: 10
            preserve_tagged: true
          cleanup:
            policy: "user_controlled"
            default_rules:
              - "Compress files older than 30 days"
              - "Delete archives older than 90 days"
            exceptions:
              - condition: "has_preservation_tag"
                action: "retain"
              - condition: "referenced_in_docs"
                action: "retain_and_link"

        knowledge_yaml:
          max_size: "10MB"
          rotation:
            trigger: "size_exceeded"
            action: "smart_archive"
            archive_location: ".ai/context/archives/knowledge/"
            retain_recent: 20
            preserve_tagged: true
          cleanup:
            policy: "user_controlled"
            default_rules:
              - "Compress files older than 60 days"
              - "Delete archives older than 180 days"
            exceptions:
              - condition: "has_preservation_tag"
                action: "retain"
              - condition: "part_of_decision_history"
                action: "retain_and_index"

      archival_processes:
        archive_and_rotate:
          description: "Basic archival process for context files"
          steps:
            - "Compress current context file"
            - "Move to archive location with timestamp"
            - "Create new empty context file"
            - "Maintain specified number of recent archives"
          example: |
            context.yaml -> context_2024_01_20.yaml.gz
            Retain last N archives based on retain_recent setting

        smart_archive:
          description: "Enhanced archival process with content awareness"
          extends: "archive_and_rotate"
          additional_steps:
            - "Analyze content for preservation tags"
            - "Split archive by content importance"
            - "Index important content for future reference"
            - "Apply retention policies by content type"
          example: |
            context.yaml -> 
              - critical/context_2024_01_20.yaml.gz
              - standard/context_2024_01_20.yaml.gz

        archive_types:
          standard:
            - "Regular context entries"
            - "Routine logs"
            - "Daily activities"
            retention: "Based on default cleanup rules"
          
          critical:
            - "Tagged important items"
            - "Decision records"
            - "Technical debt notes"
            retention: "Extended or permanent based on tags"

        rotation_strategies:
          size_based:
            trigger: "File size exceeds limit"
            action: "Create new archive"
          
          time_based:
            trigger: "Time period elapsed"
            action: "Create new archive"
          
          hybrid:
            trigger: "Either size or time condition"
            action: "Create new archive with smart splitting"

      cleanup_workflow:
        schedule:
          session: "daily"
          development: "weekly"
          knowledge: "monthly"
        
        pre_cleanup_review:
          notification:
            timing: "3_days_before"
            message: "Scheduled cleanup approaching. Here's what will be cleaned:"
            summary:
              - "Items to be removed"
              - "Age of items"
              - "Last accessed date"
              - "Size impact"
          
          review_interface:
            command: "ai context review-cleanup"
            display:
              - "Preview of affected items"
              - "Quick stats and impact"
              - "Suggested items to keep"
            actions:
              - "keep": "Preserve this item"
              - "remove": "Proceed with cleanup"
              - "tag": "Add preservation tag"
              - "export": "Export before cleanup"
              - "snooze": "Postpone decision"
          
          ai_suggestions:
            analyze:
              - "Usage patterns"
              - "Reference frequency"
              - "Related to active tasks"
              - "Historical importance"
            suggest:
              - "Items to consider keeping"
              - "Safe to remove items"
              - "Patterns to create protection rules"
          
          batch_actions:
            - "Keep all suggested items"
            - "Keep items matching pattern"
            - "Export category before cleanup"
            - "Skip review for certain types"

        automated_cleanup:
          proceed_when:
            - "Review completed"
            - "Review period expired"
            - "User opted to skip review"
          
          safety_measures:
            - "Backup before cleanup"
            - "Recoverable for 7 days"
            - "Generate cleanup report"
          
          reporting:
            include:
              - "Items removed"
              - "Items preserved"
              - "Space recovered"
              - "Preservation rules created"
            format:
              - "Summary email"
              - "Dashboard update"
              - "Git commit message"

      preservation_index:
        location: ".ai/context/preservation_index.yaml"
        tracks:
          - "preserved_items"
          - "preservation_reasons"
          - "expiration_dates"
          - "related_contexts"
        search:
          enabled: true
          indexes: ["content", "tags", "reasons"]

      user_notifications:
        pre_cleanup:
          timing: "7_days_before"
          message: "Context cleanup scheduled. Review preserved items:"
          actions:
            - "View affected items"
            - "Extend preservation"
            - "Export items"
            - "Ignore (proceed with cleanup)"
        
        preservation_expiring:
          timing: "14_days_before"
          message: "Preservation period ending for tagged items"
          actions:
            - "Review items"
            - "Extend preservation"
            - "Let expire"

      reset_policies:
        auto_reset:
          session:
            trigger: "daily"
            action: "archive_and_clear"
            preserve: ["active_tasks", "recent_decisions"]
          
          development:
            trigger: "version_tag"
            action: "archive_and_clear"
            preserve: ["api_changes", "breaking_changes"]
          
          knowledge:
            trigger: "never"
            action: "accumulate_only"

        manual_reset:
          commands:
            - "ai context reset --type session"
            - "ai context reset --type development"
            - "ai context reset --type knowledge"
          
          options:
            - "--preserve-recent=N"
            - "--keep-categories=cat1,cat2"
            - "--archive-only"

        emergency_reset:
          trigger: "context_corruption"
          actions:
            - "Backup corrupted files"
            - "Restore from last known good state"
            - "If restore fails, initialize new context"
            - "Log incident for review"

      archival:
        format: "yaml"
        compression: "gzip"
        naming: "${type}_${timestamp}_${git_branch}.yaml.gz"
        metadata:
          - "timestamp"
          - "git_branch"
          - "last_commit"
          - "context_size"
          - "reset_reason"

      monitoring:
        metrics:
          - "context_size"
          - "update_frequency"
          - "access_patterns"
          - "compression_ratio"
        alerts:
          - condition: "size > 80% capacity"
            action: "notify_developer"
          - condition: "corruption_detected"
            action: "trigger_emergency_reset"
          - condition: "stale_context"
            action: "suggest_reset"

    steps:
      1_session_start:
        description: "Capture session context"
        elements:
          - "Current feature/task"
          - "Recent code changes"
          - "Open issues/PRs"
          - "Development decisions"
        location: ".ai/context/session.yaml"
        triggers:
          - event: "editor.sessionStart"
            action: "update_session_context"
          - event: "git.checkout"
            action: "update_branch_context"
          - event: "git.commit"
            action: "update_changes_context"
        template: |
          session:
            timestamp: ${current_time}
            feature: ${current_feature}
            branch: ${current_branch}
            
            recent_changes:
              - file: ${file_path}
                type: ${change_type}
                description: ${change_description}
            
            open_items:
              issues: ${related_issues}
              prs: ${related_prs}
            
            decisions:
              - context: ${decision_context}
                decision: ${decision_made}
                rationale: ${decision_reasoning}

      2_context_tracking:
        description: "Track important context during development"
        elements:
          - "Code architecture decisions"
          - "Dependencies added/removed"
          - "API changes"
          - "Configuration updates"
        location: ".ai/context/development.yaml"
        triggers:
          - event: "file.save"
            patterns:
              - "package.json"
              - "requirements.txt"
              - "go.mod"
            action: "update_dependencies_context"
          - event: "file.save"
            patterns:
              - "**/api/**"
              - "**/*api*.{ts,js,py,go}"
            action: "update_api_context"
          - event: "file.save"
            patterns:
              - "**/*.config.{json,yaml,yml}"
            action: "update_config_context"
          - event: "ai.architectural_suggestion"
            action: "update_architecture_context"
        template: |
          development:
            architecture:
              - component: ${component_name}
                change: ${architectural_change}
                reason: ${change_reason}
            
            dependencies:
              added:
                - name: ${dependency_name}
                  version: ${version}
                  purpose: ${why_needed}
              removed:
                - name: ${dependency_name}
                  reason: ${why_removed}
            
            api_changes:
              - endpoint: ${endpoint_path}
                type: ${change_type}
                impact: ${breaking_changes}

      3_knowledge_persistence:
        description: "Maintain project knowledge"
        elements:
          - "Technical decisions"
          - "Known issues"
          - "Future considerations"
          - "Learning points"
        location: ".ai/context/knowledge.yaml"
        triggers:
          - event: "pr.comment"
            patterns:
              - "decision:"
              - "rationale:"
            action: "update_technical_decisions"
          - event: "issue.create"
            labels: ["bug", "known-issue"]
            action: "update_known_issues"
          - event: "pr.review"
            action: "update_learnings"
          - event: "ai.conversation"
            patterns:
              - "future consideration:"
              - "we should consider:"
              - "in the future:"
            action: "update_future_work"
        template: |
          knowledge:
            technical_decisions:
              - topic: ${decision_topic}
                decision: ${what_was_decided}
                alternatives: ${options_considered}
                rationale: ${why_this_choice}
            
            known_issues:
              - issue: ${issue_description}
                workaround: ${temporary_solution}
                plan: ${permanent_fix_plan}
            
            future_work:
              - topic: ${improvement_area}
                description: ${what_to_improve}
                priority: ${importance_level}
            
            learnings:
              - topic: ${learning_topic}
                insight: ${what_was_learned}
                application: ${how_to_apply}

      4_context_sync:
        description: "Sync context with team"
        methods:
          - "Commit context files with code"
          - "Share in team documentation"
          - "Discuss in standups"
        automation:
          - "Auto-commit context on significant changes"
          - "Generate context summaries for PRs"
          - "Link related context in issue comments"
        triggers:
          - event: "context.update"
            threshold: "significant"
            actions:
              - "git.stage_context_files"
              - "git.commit_context"
              - "pr.add_context_summary"
          - event: "pr.create"
            actions:
              - "generate_context_summary"
              - "add_pr_comment"
          - event: "issue.comment"
            patterns:
              - "!context"
            actions:
              - "generate_relevant_context"
              - "add_issue_comment"

        hooks:
          pre_commit:
            - "validate_context_files"
            - "format_context_yaml"
          post_commit:
            - "notify_team_context_update"
            - "update_documentation"

  1_predev:
    description: "Project setup and initialization workflow"
    steps:
      1_repository:
        description: "Initialize repository and basic structure"
        tasks:
          - "Initialize git repository"
          - "Set up .gitignore"
          - "Configure repository settings"
        files:
          - ".gitignore"
          - "LICENSE"
          - "README.md"

      2_dependencies:
        description: "Set up project dependencies"
        tasks:
          - "Initialize package manager"
          - "Add core dependencies"
          - "Configure build tools"
        files:
          - "package.json"
          - "tsconfig.json"
          - "jest.config.js"

      3_ci_setup:
        description: "Configure CI/CD pipeline"
        tasks:
          - "Set up GitHub Actions"
          - "Configure test runners"
          - "Set up linting"
        files:
          - ".github/workflows/ci.yml"
          - ".eslintrc"
          - ".prettierrc"

  2_documentation:
    description: "Documentation setup and standards"
    steps:
      1_structure:
        description: "Set up documentation structure"
        files:
          - "docs/"
          - "docs/api/"
          - "docs/guides/"
          - "docs/examples/"
          
      2_templates:
        description: "Create documentation templates"
        templates:
          api: |
            # API Documentation
            ## Overview
            ${api_overview}
            
            ## Endpoints
            ${endpoints}
            
            ## Examples
            ${examples}
          
          guide: |
            # User Guide
            ## Introduction
            ${introduction}
            
            ## Getting Started
            ${getting_started}
            
            ## Features
            ${features}

      3_standards:
        description: "Define documentation standards"
        guidelines:
          - "Use clear, concise language"
          - "Include code examples"
          - "Keep API documentation up-to-date"
          - "Document breaking changes"

  3_development:
    description: "Core development workflows"
    sub_workflows:
      3.1_coding:
        description: "Code development workflow"
        steps:
          1_feature_planning:
            description: "Define feature and implementation plan"
            location: "docs/features/${feature_name}/feature.md"
            template: |
              # ${feature_name}

              ## 1. User Story
              Feature: ${feature_name}
                As a ${user_type}
                I want ${desired_action}
                So that ${business_value}

              ## 2. Scenarios
              Scenario: ${primary_scenario}
                Given ${precondition}
                When ${action}
                Then ${expected_result}

              Additional Scenarios:
              - Happy paths
              - Edge cases
              - Error scenarios

              ## 3. Acceptance Criteria
              - [ ] ${criteria_1}
              - [ ] ${criteria_2}
              - [ ] ${criteria_3}

              ---
              # Implementation

              ## 4. Feature Plan
              Based on the user story above, here's the implementation plan:

              - Purpose: ${feature_purpose}
              - Requirements: ${requirements}
              - Dependencies: ${dependencies}
              - Timeline: ${timeline}

              ## 5. Technical Notes
              - Architecture: ${arch_notes}
              - Data Changes: ${data_notes}
              - Security: ${security_notes}
              - Performance: ${perf_notes}

              ## 6. Implementation Phases
              1. ${step_1}
              2. ${step_2}
              3. ${step_3}

          2_implementation:
            description: "Implement feature"
            guidelines:
              - "Follow clean code principles"
              - "Write self-documenting code"
              - "Consider edge cases"
              - "Handle errors gracefully"

          3_code_review:
            description: "Review code changes"
            checklist:
              - "Code follows style guide"
              - "Tests are comprehensive"
              - "Documentation is updated"
              - "No security vulnerabilities"

      3.2_testing:
        description: "Testing workflow"
        steps:
          1_unit_tests:
            description: "Write and run unit tests"
            coverage:
              minimum: 80
              target: 90

          2_integration_tests:
            description: "Write integration tests"
            focus_areas:
              - "API endpoints"
              - "Database operations"
              - "External services"

          3_e2e_tests:
            description: "End-to-end testing"
            tools:
              - "Jest"
              - "Supertest"

      3.3_github:
        description: "GitHub workflow"
        steps:
          1_branching:
            description: "Branch management"
            patterns:
              feature: "feature/${name}"
              bugfix: "fix/${issue}"
              docs: "docs/${topic}"
              release: "release/v${version}"

          2_pr_process:
            description: "Pull request process"
            requirements:
              - "Branch up-to-date with main"
              - "All CI checks passing"
              - "Required reviewers approved"
            protection:
              - "Require status checks to pass before merging"
              - "Require branches to be up to date"
              - "Require conversation resolution"
              - "Do not allow bypassing the above settings"

          3_review:
            description: "Code review process"
            checklist:
              - "No code conflicts"
              - "Has documentation"

          4_merge:
            description: "Merge process"
            steps:
              - "Squash and merge"
              - "Delete branch after merge"
              - "Auto-update related issues"

      3.4_versioning:
        description: "Version management"
        strategy: "semantic"
        rules:
          major: "Breaking changes"
          minor: "New features"
          patch: "Bug fixes"
        protection:
          - "main"
          - "release/*"

      3.5_release:
        description: "Release management"
        steps:
          1_preparation:
            description: "Prepare release"
            tasks:
              - "Update version numbers"
              - "Update changelog"
              - "Run final tests"

          2_publish:
            description: "Publish release"
            steps:
              - "Create git tag"
              - "Push to registry"
              - "Create GitHub release"

          3_announce:
            description: "Announce release"
            channels:
              - "GitHub Releases"
              - "npm"
              - "Documentation site"

  4_docs_site:
    description: "Documentation site workflow"
    steps:
      1_setup:
        description: "Set up documentation site"
        tools:
          - "GitHub Pages"

      2_structure:
        description: "Organize documentation"
        sections:
          - "Getting Started"
          - "User Guide"
          - "API Reference"
          - "Examples"
          - "Contributing"

      3_deployment:
        description: "Deploy documentation"
        steps:
          - "Build documentation"
          - "Run link checker"
          - "Deploy to GitHub Pages"

patterns:
  code:
    clean_code:
      description: "Clean code principles"
      guidelines:
        - "Use meaningful names"
        - "Keep functions small"
        - "Single responsibility"
        - "DRY (Don't Repeat Yourself)"
      simplicity_first:
        description: "Favor simplicity over complexity"
        principles:
          - "Start with the simplest solution that could work"
          - "Only add complexity when justified by concrete needs"
          - "Solve problems from first principles"
          - "Question assumptions before adding layers"
        examples:
          good: |
            // Simple, straightforward approach
            function calculateTotal(items) {
              return items.reduce((sum, item) => sum + item.price, 0);
            }

          avoid: |
            // Over-engineered solution
            class PriceCalculationStrategy implements ICalculationStrategy {
              private aggregator: IPriceAggregator;
              constructor(private readonly priceService: IPriceService) {
                this.aggregator = new PriceAggregationFactory().create();
              }
              // ... many more lines of unnecessary abstraction
            }

        questions_to_ask:
          - "What's the simplest way to solve this problem?"
          - "Do we really need this abstraction?"
          - "Can we solve this with existing tools/patterns?"
          - "Are we adding complexity for future needs that may never come?"

    error_handling:
      description: "Error handling patterns"
      guidelines:
        - "Always use try/catch for error handling"
        - "Use descriptive error messages"
        - "Include error codes"
        - "Provide recovery steps"
        - "Log errors appropriately"
      example: |
        // TypeScript/JavaScript Example
        try {
          await readFile();
        } catch (error) {
          if (error instanceof FileNotFoundError) {
            // Descriptive message with error code and proper logging
            logger.error('ERR_001: File not found:', error.message, {
              code: 'ERR_001',
              stack: error.stack,
              context: { filePath: error.filePath }
            });
            // Recovery steps included in error
            throw new CustomError('ERR_001: Unable to read file. Please check if file exists and try again', { 
              code: 'ERR_001',
              recovery: 'Verify file path and permissions'
            });
          } else {
            // Handle unexpected errors with code, logging, and recovery
            logger.error('ERR_999: Unexpected error:', error, {
              code: 'ERR_999',
              stack: error.stack,
              context: { operation: 'readFile' }
            });
            throw new CustomError('ERR_999: An unexpected error occurred', {
              code: 'ERR_999',
              recovery: 'Please try again or contact support if the issue persists'
            });
          }
        }

  documentation:
    api_docs:
      description: "API documentation patterns"
      sections:
        - "Overview"
        - "Authentication"
        - "Endpoints"
        - "Examples"
        - "Error Codes"

    user_guides:
      description: "User guide patterns"
      elements:
        - "Quick Start"
        - "Detailed Guide"
        - "Examples"
        - "Troubleshooting"
      tone:
        - "Clear and concise"
        - "Friendly but professional"
        - "Empowering not condescending"
        - "Solution-focused"
      storytelling:
        style: "Professional narrative with purpose"
        principles:
          - "Start with the why before the how"
          - "Use real-world scenarios"
          - "Keep narrative focused on user goals"
          - "Build complexity gradually"
          - "Maintain forward momentum"
        examples:
          good: |
            "Every great feature starts with a problem to solve. In this guide, we'll build a data pipeline that transforms raw logs into actionable insights."
            
            "Imagine you're managing a growing codebase. As complexity increases, maintaining documentation becomes challenging. Let's explore how our CLI tools make this manageable."
            
            "When applications scale, error handling becomes critical. Here's how to implement robust error handling that helps both users and developers."
          
          avoid: |
            "OMG! Let me tell you about this amazing feature!"
            
            "So, funny story... one day a developer was trying to fix a bug, and then another bug appeared, and then another..."
            
            "Let me give you some background first... [three paragraphs later] ...and that's why we need this feature."
      examples:
        good: |
          "To create a new project, run the init command:"
          "If you encounter this error, here's how to fix it:"
          "Let's walk through building your first feature:"
        avoid: |
          "Obviously, you need to run init first"
          "Just fix the error and try again"
          "As any developer knows..."

  testing:
    unit_testing:
      description: "Unit testing patterns"
      practices:
        - "Arrange-Act-Assert"
        - "Test isolation"
        - "Mock external dependencies"
        - "Edge case coverage"

    integration_testing:
      description: "Integration testing patterns"
      focus:
        - "Component interaction"
        - "Data flow"
        - "Error scenarios"
        - "Performance benchmarks"

# Roadmap for future development
roadmap:
  current_phase: "context_management_v1"
  status: "active_development"
  
  phases:
    context_management_v1:
      status: "in_progress"
      features:
        - "Basic context persistence"
        - "User-controlled preservation"
        - "Smart archival process"
        - "Cleanup workflows"
    
    context_management_v2:
      status: "planned"
      theme: "Team Collaboration"
      priority: 1
      rationale: "Immediate value for teams"
      features:
        shared_context:
          storage:
            - "Team-wide context repository"
            - "Role-based access control"
            - "Conflict resolution strategies"
          features:
            - "Team context dashboards"
            - "Context review requests"
            - "Knowledge sharing protocols"
          notifications:
            - "Context updates by team members"
            - "Shared decision points"
            - "Critical knowledge alerts"
    
    context_management_v3:
      status: "planned"
      theme: "Project-Specific Retention"
      priority: 2
      rationale: "Critical for different project needs"
      features:
        custom_retention:
          project_types:
            microservice:
              - "API design decisions: permanent"
              - "Performance tweaks: 1 year"
              - "Deployment context: 6 months"
            ml_project:
              - "Training decisions: permanent"
              - "Model versions: 2 years"
              - "Data preprocessing: 1 year"
            security_critical:
              - "All decisions: permanent"
              - "Risk assessments: 5 years"
              - "Audit context: 3 years"
          compliance_rules:
            - "GDPR requirements"
            - "SOC2 compliance"
            - "HIPAA regulations"
    
    context_management_v4:
      status: "future"
      theme: "External Knowledge Base Integration"
      priority: 3
      rationale: "Enhances existing documentation"
      features:
        confluence_integration:
          features:
            - "Two-way sync with Confluence spaces"
            - "Auto-update technical documentation"
            - "Link context to wiki pages"
          sync_policies:
            - "Sync on major decisions"
            - "Daily sync of critical context"
            - "On-demand full sync"
        notion_integration:
          features:
            - "Sync with Notion databases"
            - "Context-aware page creation"
            - "Bidirectional updates"
    
    context_management_v5:
      status: "future"
      theme: "ML-Enhanced Preservation"
      priority: 4
      rationale: "Requires data collection from previous phases"
      features:
        machine_learning:
          features:
            - "Pattern recognition in preserved items"
            - "User behavior analysis"
            - "Automated importance scoring"
          models:
            - "Context importance predictor"
            - "Usage pattern analyzer"
            - "Knowledge gap detector"
          training:
            - "Learn from user preservation choices"
            - "Team-wide preservation patterns"
            - "Project-specific importance signals"

  dependencies:
    context_management_v2:
      requires: ["context_management_v1"]
    context_management_v3:
      requires: ["context_management_v1"]
    context_management_v4:
      requires: ["context_management_v2"]
    context_management_v5:
      requires: ["context_management_v2", "context_management_v3"]
  
  success_metrics:
    - "Team adoption rate"
    - "Context retrieval speed"
    - "Knowledge preservation accuracy"
    - "Storage efficiency"
    - "User satisfaction"
